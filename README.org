#+TITLE:    language.c README
#+AUTHOR:   Jan Moringen
#+EMAIL:    jmoringe@techfak.uni-bielefeld.de
#+LANGUAGE: en

#+OPTIONS:  toc:nil num:nil
#+SEQ_TODO: TODO STARTED | DONE

* STARTED Introduction

  This library provides parsers for the C programming language and its
  preprocessor as described in [[https://web.archive.org/web/20181230041359if_/http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf][Annex A of SO/IEC 9899:2017]]. For the
  preprocessor language, it also provides an interpreter.

  This library uses package-local nicknames. It has been tested in
  SBCL.

* STARTED Tutorial

  This section discusses different modules provided by the library:

  + [[*The Interface Package]] :: This module provides a high-level
       interface consisting of convenience functions for parsing and
       evaluating CPP or C inputs or doing multiple of those things at
       once.

  + [[*The Preprocessor Language]] :: This module provides a parser, a
       meta-model and an evaluator for the C preprocessor language.

  + [[*The C Language]] :: This module provides a parser and a meta-model.

** STARTED The Interface Package

   This module contains convenience functions for preprocessing and
   parsing C code. The corresponding ASDF system and package are both
   called ~language.c.interface~.

   #+BEGIN_SRC lisp :exports results :results silent
     (ql:quickload '#:language.c.interface)
   #+END_SRC

   The ~preprocess~ function of this module offers a convenient way of
   preprocessing C code:

   #+BEGIN_SRC lisp :exports both :results output
     (language.c.interface:preprocess "#define foo(x) (x<<1)
     #if foo(1) < 3
     foo(1) foo(2)
     #else
     foo(3) foo(4)
     #endif

     #define bar 1 bar 2
     bar

     #define baz(x) 1 x baz(2) baz 3
     baz(4) baz(5)")
   #+END_SRC

   #+RESULTS:
   #+begin_example
     (1<<1)(2<<1)

     1 bar 2

     1 4 baz(2)baz 3 1 5 baz(2)baz 3
   #+end_example

   The other main function is ~parse~:

   #+BEGIN_SRC lisp :exports both :results value
     (language.c.interface:parse "#define foo main() {
     int foo
       return 1;
     }")
   #+END_SRC

   #+RESULTS:
   #+begin_src lisp
     (:TRANSLATION-UNIT
      (:DECLARATION
       (((:FUNCTION-DEFINITION
          (:BODY
           (((:RETURN-STATEMENT
              (:VALUE
               (((:CONSTANT NIL :TYPE :INTEGER :VALUE 1 :SIZE NIL :UNSIGNED? NIL
                  :BOUNDS (19 . 20)))))
              :BOUNDS (12 . 20))))
           :RETURN ((:INT)) :DECLARATOR
           (((:DIRECT-DECLARATOR
              (:NAME (((:IDENTIFIER NIL :NAME MAIN :BOUNDS (4 . 8))))) :BOUNDS
              (4 . 10)))))
          :BOUNDS (0 . 24)))))
      :BOUNDS (0 . 24))
   #+end_src

** STARTED The Preprocessor Language

*** STARTED Parsing

    The ability to parse the C preprocessor language is provided by
    the ~language.c.preprocessor.parser~ systems.

    #+BEGIN_SRC lisp :exports results :results silent
      (ql:quickload '#:language.c.preprocessor.parser)
    #+END_SRC

    After loading that system, inputs such as strings and files can be
    parsed using the ~parse~ generic function:

    #+BEGIN_SRC lisp :exports both :results value verbatim
      (language.c.preprocessor.parser:parse "#define foo 1 + 2" 'list)
    #+END_SRC

    #+RESULTS:
    #+begin_src lisp
    (:GROUP
     (:PART
      (((:DEFINE-OBJECT-LIKE-MACRO
         (:REPLACEMENT
          (((:NUMBER NIL :VALUE "1" :BOUNDS (12 . 13)))
           ((:PUNCTUATOR NIL :WHICH :+ :BOUNDS (14 . 16)))
           ((:NUMBER NIL :VALUE "2" :BOUNDS (16 . 17))))
          :NAME (((:IDENTIFIER NIL :NAME "foo" :BOUNDS (8 . 11)))))
         :BOUNDS (1 . 17)))))
     :BOUNDS (0 . 17))
    NIL
    T
    #+end_src

    The second argument is a "builder" which controls the construction
    of the parse result (The "builder" concept, related protocols and
    their implementation can be found in the
    [[https://github.com/scymtym/architecture.builder-protocol][architecture.builder-protocol]] system). In the example above, the
    ~list~ builder has been used to produce a simple list-based
    representation of the parse tree.

    Another possibility is producing a parse tree consisting of
    instances of classes defined in the ~language.c.preprocessor.model~
    package:

    #+BEGIN_SRC lisp :exports both :results value verbatim
      (language.c.preprocessor.parser:parse
       "#define foo 1 + 2"
       (make-instance 'language.c.preprocessor.model:builder))
    #+END_SRC

    #+RESULTS:
    #+begin_example
      #<LANGUAGE.C.PREPROCESSOR.MODEL:GROUP {10023739B3}>
      NIL
      T
    #+end_example

*** STARTED Evaluating Syntax Trees

    #+BEGIN_SRC lisp :exports both :results output verbatim
      (let* ((ast (language.c.preprocessor.parser:parse
                   (format nil "#if !defined foo~@
                                #define foo 1~@
                                foo bar~@
                                baz fez~@
                                #endif~@
                                ")
                   (make-instance 'language.c.preprocessor.model:builder)))
             (environment (make-instance 'language.c.preprocessor.evaluator::environment))
             (result (language.c.preprocessor.evaluator:evaluate
                      ast '() environment)))
        (language.c.preprocessor.evaluator::output result *standard-output*)
        (describe environment))
    #+END_SRC

    #+RESULTS:
    #+begin_example
      1 bar
      baz fez
      #<LANGUAGE.C.PREPROCESSOR.EVALUATOR:ENVIRONMENT {101827EEE3}>
        [standard-object]

      Slots with :INSTANCE allocation:
        %ENTRIES                       = #{"foo" :..
    #+end_example

** STARTED The C Language

*** STARTED Parsing

    #+BEGIN_SRC lisp :exports both :results value verbatim
      (language.c.c.parser:parse "int f() { return 1; }" 'list)
    #+END_SRC

    #+RESULTS:
    #+begin_src lisp
    (:TRANSLATION-UNIT
     (:DECLARATION
      (((:FUNCTION-DEFINITION
         (:BODY
          (((:RETURN-STATEMENT
             (:VALUE
              ((((:CONSTANT NIL :TYPE :INTEGER :VALUE 1 :SIZE NIL :UNSIGNED? NIL
                  :BOUNDS (17 . 18))))))
             :BOUNDS (10 . 18))))
          :RETURN ((:INT)) :NAME (((:IDENTIFIER NIL :NAME "f" :BOUNDS (4 . 5)))))
         :BOUNDS (0 . 21)))))
     :BOUNDS (0 . 21))
    NIL
    T
    #+end_src

*** TODO Evaluating

* STARTED Reference

  #+BEGIN_SRC lisp :results none :exports none :session "doc"
    #.(progn
        #1=(ql:quickload '(:model.transform.trace :alexandria :split-sequence))
        '#1#)
    (defun doc (symbol kind)
      (let* ((lambda-list (sb-introspect:function-lambda-list symbol))
             (string      (documentation symbol kind))
             (lines       (split-sequence:split-sequence #\Newline string))
             (trimmed     (mapcar (alexandria:curry #'string-left-trim '(#\Space)) lines)))
        (format nil "~(~A~) ~<~{~A~^ ~}~:@>~2%~{~A~^~%~}"
                symbol (list lambda-list) trimmed)))
  #+END_SRC


** DONE ~toolchain-information~ Module

   This module allows storing and retrieving information about
   compilation environments such as builtin macro definitions and
   include search paths. The basic idea is to include this information
   for different compilation environments and select the appropriate
   one at runtime.

   A compilation environment is characterized by a compiler type and
   version, a hardware type, an operating system type and a "userland"
   type:

   #+BEGIN_SRC lisp :results value :exports results
     (doc 'language.c.toolchain-information:guess-toolchain 'function)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   guess-toolchain &KEY (COMPILER-TYPE (GUESS-COMPILER-TYPE))
                   (COMPILER-VERSION (GUESS-COMPILER-VERSION COMPILER-TYPE))
                   (MACHINE-TYPE (GUESS-MACHINE-TYPE))
                   (SOFTWARE-TYPE (GUESS-SOFTWARE-TYPE))
                   (USERLAND-TYPE
                    (GUESS-USERLAND-TYPE COMPILER-TYPE MACHINE-TYPE SOFTWARE-TYPE))

   Guess and return toolchain information for the local machine.

   Return a list of five values: 1) a string designating the C
   compiler type 2) a string designating the C compiler version 3) a
   string indicating the machine type 4) a string indicating
   the (operating system) software type 5) a string indicating the
   userland type.
   #+end_example

   #+BEGIN_SRC lisp :results value :exports results
     (doc 'language.c.toolchain-information:guess-toolchain-id 'function)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   guess-toolchain-id &REST ARGS &KEY COMPILER-TYPE COMPILER-VERSION MACHINE-TYPE
                      SOFTWARE-TYPE USERLAND-TYPE

   Guess and return a toolchain id for the local machine.

   Return a string of the form "CT-CV-MT-ST-UT" where
   CT is the compiler type
   CV is the compiler version
   MT is the machine type
   ST is the (operating system) software type
   UT is the userland type.
   #+end_example

   Information for different compilation environments can be stored
   and retrieved, indexed by toolchain ids:

   #+BEGIN_SRC lisp :results value :exports results
     (doc 'language.c.toolchain-information:find-information 'function)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   find-information ID &KEY (IF-DOES-NOT-EXIST #'ERROR)

   Return information for the toolchain designated by ID.

   IF-DOES-NOT-EXIST controls the behavior in cases no information is
   available for the supplied ID. If the value is a function or the
   symbol `cl:error', it is called with an error condition as the sole
   argument. Otherwise the supplied value is returned from
   `find-information'.

   The returned information is a plist which at least contains the
   following properties:

   1) Key `:search-path', value a list of pathnames with form the
   compiler search path for includes. Elements closer to the head
   of the list aught to be tried before elements closer to the
   tail.

   2) Key `:builtin-macros', value a function that can be called with
   an environment as the sole argument. The function adds macro
   entries to the supplied environment and returns the modified
   environment.

   The returned value is mainly intended to be used with
   `augment-environment!'.
   #+end_example

   #+BEGIN_SRC lisp :results value :exports results
     (doc 'language.c.toolchain-information:register-information 'function)
   #+END_SRC

   #+begin_example:
   register-information ID SEARCH-PATH BUILTIN-MACROS

   Install SEARCH-PATH and BUILTIN-MACROS as information for ID.

   The values of SEARCH-PATH and BUILTIN-MACROS should conform to the
   description given for `find-information'.

   Existing information for ID is replaced.
   #+end_example

   Toolchain information can be used to augment an environment in
   order to impersonate that toolchain when processing C code:

   #+BEGIN_SRC lisp :results value :exports results
     (doc 'language.c.toolchain-information:augment-environment! 'function)
   #+END_SRC

   #+RESULTS:
   #+begin_example
   augment-environment! ENVIRONMENT INFORMATION &KEY SEARCH-PATH

   Augment ENVIRONMENT with toolchain information INFORMATION.

   In more detail, builtin macro definitions and include search path
   entries from INFORMATION are added to ENVIRONMENT.

   If SEARCH-PATH is supplied, the supplied value is used instead of
   the one contained in INFORMATION. In either case, the previous
   search path of ENVIRONMENT is replaced, not augmented.

   Return destructively modified ENVIRONMENT
   #+end_example

** STARTED ~preprocessor~ Modules

*** STARTED ~preprocessor.model~ Module

    This module contains generic functions and classes for
    representing and working with abstract syntax trees for the C
    preprocessor language.

*** TODO ~preprocessor.parser~ Module

    This module contains functions for parsing the C preprocessor
    language. The parser consists of a collection of grammar rules
    that are implicitly by the high-level interface but can also be
    used directly to parse specific parts of the language.

    The high-level interface mainly provides the following function:

    #+BEGIN_SRC lisp :results value :exports results
      (doc 'language.c.preprocessor.parser:parse 'function)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    parse INPUT BUILDER &KEY RULE

    Parse INPUT according to RULE, return result built with BUILDER.

    INPUT has to be convertible to a sequences characters. As such,
    strings, streams and pathnames are always supported while methods
    for other types of inputs may be defined.

    BUILDER controls the construction of the result (usually a parse
    tree) that the function will return in case of a successful
    parse.

    RULE, if supplied, specifies (generally restricts) the part of the
    grammar that should be used for parsing INPUT. This allows, for
    example, checking whether a given input conforms to the syntax of
    a specific element of the language.
    #+end_example

*** TODO ~preprocessor.evaluator~ Module

** TODO ~c~ Modules

*** TODO ~c.parser~ Module
